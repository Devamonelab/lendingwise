================================================================================
                  LENDINGWISE - READY TO DEPLOY (SINGLE CONTAINER)
================================================================================

âœ… ALL SERVICES IN ONE CONTAINER

================================================================================
WHAT'S CONFIGURED
================================================================================

Single Docker Container Running:
  1. FastAPI Server (port 8000) - API endpoints
  2. SQS Worker - Document processing
  3. Cross-Validation Watcher - Validation monitoring

Container Name: lendingwise-all-in-one
Port Exposed: 8000
All services start automatically in parallel threads.

================================================================================
DEPLOYMENT COMMAND
================================================================================

docker-compose up -d --build

That's it! No .env file needed (uses defaults).

================================================================================
WHAT HAPPENS WHEN YOU RUN IT
================================================================================

1. Docker builds the image (installs dependencies)
2. Starts single container: lendingwise-all-in-one
3. Container runs start_all_services.py
4. Script starts 3 threads:
   - Thread 1: FastAPI on port 8000
   - Thread 2: SQS Worker (background)
   - Thread 3: Cross-Validation (background)
5. All services run in parallel

================================================================================
VERIFY DEPLOYMENT
================================================================================

Check Status:
docker-compose ps

Expected Output:
NAME                     STATUS          PORTS
lendingwise-all-in-one   Up              0.0.0.0:8000->8000/tcp

Test API:
curl http://localhost:8000/

Expected Response:
{
  "message": "AI Agents Database API is running",
  "version": "1.0.0",
  "status": "healthy"
}

View Logs:
docker-compose logs -f

Expected Logs:
[Main] âœ“ FastAPI thread started
[Main] âœ“ SQS Worker thread started
[Main] âœ“ Cross-Validation thread started
[FastAPI] Uvicorn running on http://0.0.0.0:8000

================================================================================
CONFIGURATION (DEFAULTS IN docker-compose.yml)
================================================================================

AWS_REGION=us-east-2
OPENAI_API_KEY=(empty - set if using LLM)
DB_HOST=3.129.145.187
DB_PORT=3306
DB_USER=aiagentdb
DB_PASSWORD=Agents@1252
DB_NAME=stage_newskinny
OCR_MODE=ocr+llm

No .env file needed! Defaults work out of the box.

If you want to override, create .env file with your values.

================================================================================
API ENDPOINTS (http://localhost:8000)
================================================================================

GET  /                                     - Health check
GET  /docs                                 - Swagger docs
GET  /api/documents/{fpcid}/{lmrid}       - Get all documents
GET  /api/documents/{fpcid}/{lmrid}/{doc_id} - Get specific document
POST /create-agent-record                  - Create agent record

================================================================================
MANAGEMENT COMMANDS
================================================================================

Deploy:
docker-compose up -d --build

Stop:
docker-compose down

Restart:
docker-compose restart

View Logs:
docker-compose logs -f lendingwise-all

Check Status:
docker-compose ps

Update and Redeploy:
git pull
docker-compose up -d --build

================================================================================
FILES CREATED/MODIFIED
================================================================================

âœ… docker-compose.yml - Single service configuration
âœ… start_all_services.py - Orchestrates all 3 services
âœ… Dockerfile - Updated for all services
âœ… S3_Sqs/__init__.py - Module init
âœ… QUICK_DEPLOY.md - Deployment guide
âœ… DEPLOY_NOW.txt - This file

âœ… Nodes/tools/db.py - Added doc_verification_result field
âœ… Nodes/nodes/classification_node.py - Save fail results
âœ… Nodes/nodes/extraction_node.py - Save pass results
âœ… S3_Sqs/fe_push_simple_api.py - API with doc_id endpoint

================================================================================
DATABASE FIELD (ADD ONCE)
================================================================================

Run this SQL command once:

ALTER TABLE stage_newskinny.tblaiagents 
ADD COLUMN doc_verification_result TEXT NULL;

This stores validation results (pass/fail reasons) as JSON.

================================================================================
AWS DEPLOYMENT
================================================================================

1. SSH into EC2:
   ssh -i your-key.pem ubuntu@YOUR_SERVER_IP

2. Clone/upload code:
   git clone YOUR_REPO_URL
   cd lendingwise

3. Deploy:
   docker-compose up -d --build

4. Open port 8000 in security group

5. Test:
   curl http://YOUR_SERVER_IP:8000/

Done! âœ…

================================================================================
TROUBLESHOOTING
================================================================================

Issue: Services not starting
Fix: docker-compose logs lendingwise-all

Issue: API not responding
Fix: docker-compose restart

Issue: Port 8000 in use
Fix: Change ports in docker-compose.yml to "8001:8000"

Issue: Database connection error
Fix: Check DB_HOST in docker-compose.yml (should be 3.129.145.187)

================================================================================
MONITORING
================================================================================

Container Status:
docker-compose ps

Resource Usage:
docker stats lendingwise-all-in-one

Real-time Logs:
docker-compose logs -f

Health Check:
curl http://localhost:8000/
(Auto-checked every 30 seconds by Docker)

================================================================================
BENEFITS OF SINGLE CONTAINER
================================================================================

âœ… One command deploys everything
âœ… All logs in one place
âœ… Simpler monitoring
âœ… No inter-container networking overhead
âœ… Faster startup (no dependency waits)
âœ… Resource efficient (shared memory)
âœ… Easier debugging

================================================================================
WHAT RUNS IN THE CONTAINER
================================================================================

Process Tree:
â””â”€ start_all_services.py (main process)
   â”œâ”€ Thread 1: uvicorn (FastAPI on port 8000)
   â”œâ”€ Thread 2: sqs_worker.py (SQS message processing)
   â””â”€ Thread 3: run_cross_validation_watcher.py (validation)

All threads monitored by main process.
If one fails, main process detects it.

================================================================================
TESTING
================================================================================

1. Deploy:
   docker-compose up -d --build

2. Wait 30 seconds for startup

3. Test API:
   curl http://localhost:8000/

4. Test document fetch:
   curl http://localhost:8000/api/documents/3580/2

5. View logs:
   docker-compose logs lendingwise-all

6. Check all services started:
   docker-compose logs lendingwise-all | grep "started"

Should see:
âœ“ FastAPI thread started
âœ“ SQS Worker thread started
âœ“ Cross-Validation thread started

================================================================================
NEXT STEPS
================================================================================

1. Run: docker-compose up -d --build
2. Wait 30 seconds
3. Test: curl http://localhost:8000/
4. Check logs: docker-compose logs -f
5. Access Swagger: http://localhost:8000/docs

================================================================================
STATUS: âœ… READY FOR DEPLOYMENT
================================================================================

Run this command to deploy everything:

    docker-compose up -d --build

Then test:

    curl http://localhost:8000/

ðŸŽ‰ Everything is configured and ready to go!

================================================================================
QUICK REFERENCE
================================================================================

Deploy:         docker-compose up -d --build
Test:           curl http://localhost:8000/
Logs:           docker-compose logs -f
Stop:           docker-compose down
Restart:        docker-compose restart
Status:         docker-compose ps
Documentation:  See QUICK_DEPLOY.md

================================================================================

